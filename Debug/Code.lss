
Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bd4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000bd4  00000c68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002d  008000a0  008000a0  00000ca8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000198f  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008af  00000000  00000000  00002777  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cce  00000000  00000000  00003026  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00003cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052d  00000000  00000000  00003f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d5a  00000000  00000000  00004449  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000051a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	f5 c0       	rjmp	.+490    	; 0x1ee <__vector_1>
   4:	2d c0       	rjmp	.+90     	; 0x60 <__bad_interrupt>
   6:	2c c0       	rjmp	.+88     	; 0x60 <__bad_interrupt>
   8:	2b c0       	rjmp	.+86     	; 0x60 <__bad_interrupt>
   a:	2a c0       	rjmp	.+84     	; 0x60 <__bad_interrupt>
   c:	62 c3       	rjmp	.+1732   	; 0x6d2 <__vector_6>
   e:	28 c0       	rjmp	.+80     	; 0x60 <__bad_interrupt>
  10:	27 c0       	rjmp	.+78     	; 0x60 <__bad_interrupt>
  12:	26 c0       	rjmp	.+76     	; 0x60 <__bad_interrupt>
  14:	25 c0       	rjmp	.+74     	; 0x60 <__bad_interrupt>
  16:	24 c0       	rjmp	.+72     	; 0x60 <__bad_interrupt>
  18:	23 c0       	rjmp	.+70     	; 0x60 <__bad_interrupt>
  1a:	22 c0       	rjmp	.+68     	; 0x60 <__bad_interrupt>
  1c:	21 c0       	rjmp	.+66     	; 0x60 <__bad_interrupt>
  1e:	20 c0       	rjmp	.+64     	; 0x60 <__bad_interrupt>
  20:	1f c0       	rjmp	.+62     	; 0x60 <__bad_interrupt>
  22:	1e c0       	rjmp	.+60     	; 0x60 <__bad_interrupt>
  24:	1d c0       	rjmp	.+58     	; 0x60 <__bad_interrupt>
  26:	1c c0       	rjmp	.+56     	; 0x60 <__bad_interrupt>
  28:	1b c0       	rjmp	.+54     	; 0x60 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d1 e0       	ldi	r29, 0x01	; 1
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	e4 ed       	ldi	r30, 0xD4	; 212
  3e:	fb e0       	ldi	r31, 0x0B	; 11
  40:	02 c0       	rjmp	.+4      	; 0x46 <__SREG__+0x7>
  42:	05 90       	lpm	r0, Z+
  44:	0d 92       	st	X+, r0
  46:	a0 3a       	cpi	r26, 0xA0	; 160
  48:	b1 07       	cpc	r27, r17
  4a:	d9 f7       	brne	.-10     	; 0x42 <__SREG__+0x3>

0000004c <__do_clear_bss>:
  4c:	20 e0       	ldi	r18, 0x00	; 0
  4e:	a0 ea       	ldi	r26, 0xA0	; 160
  50:	b0 e0       	ldi	r27, 0x00	; 0
  52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
  54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
  56:	ad 3c       	cpi	r26, 0xCD	; 205
  58:	b2 07       	cpc	r27, r18
  5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
  5c:	80 d4       	rcall	.+2304   	; 0x95e <main>
  5e:	b8 c5       	rjmp	.+2928   	; 0xbd0 <_exit>

00000060 <__bad_interrupt>:
  60:	cf cf       	rjmp	.-98     	; 0x0 <__vectors>

00000062 <lcdCommand>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  62:	e7 ec       	ldi	r30, 0xC7	; 199
  64:	f0 e0       	ldi	r31, 0x00	; 0
  66:	31 97       	sbiw	r30, 0x01	; 1
  68:	f1 f7       	brne	.-4      	; 0x66 <lcdCommand+0x4>
  6a:	00 c0       	rjmp	.+0      	; 0x6c <lcdCommand+0xa>
  6c:	00 00       	nop
//-----------------------------------------------------------------------------------------//
void lcdCommand(unsigned char cmnd)
{
	_delay_us(100);
	
	LCD_PRT = (LCD_PRT & 0x0F) | (cmnd & 0xF0);		//Send high nibble d4-d7 to data port
  6e:	98 b3       	in	r25, 0x18	; 24
  70:	9f 70       	andi	r25, 0x0F	; 15
  72:	28 2f       	mov	r18, r24
  74:	20 7f       	andi	r18, 0xF0	; 240
  76:	92 2b       	or	r25, r18
  78:	98 bb       	out	0x18, r25	; 24
	LCD_PRT &= ~(1<<LCD_RS);		//RS=0 for command
  7a:	c1 98       	cbi	0x18, 1	; 24
	LCD_PRT &= ~(1<<LCD_RW);		//RW=0 for write
  7c:	c2 98       	cbi	0x18, 2	; 24
	LCD_PRT |= (1<<LCD_EN);			//EN=1 for H=to-L pulse
  7e:	c3 9a       	sbi	0x18, 3	; 24
  80:	f2 e0       	ldi	r31, 0x02	; 2
  82:	fa 95       	dec	r31
  84:	f1 f7       	brne	.-4      	; 0x82 <lcdCommand+0x20>
  86:	00 c0       	rjmp	.+0      	; 0x88 <lcdCommand+0x26>
	_delay_us(1);					//Wait to make enable wide
	LCD_PRT &= ~(1<<LCD_EN);		//EN = 0 for H-to-L pulse
  88:	c3 98       	cbi	0x18, 3	; 24
  8a:	95 e3       	ldi	r25, 0x35	; 53
  8c:	9a 95       	dec	r25
  8e:	f1 f7       	brne	.-4      	; 0x8c <lcdCommand+0x2a>
  90:	00 00       	nop
	
	_delay_us(20);					//Wait to make enale wide

	LCD_PRT = (LCD_PRT & 0x0F) | (cmnd << 4);		//Send low nibble d4-d7 to data port
  92:	98 b3       	in	r25, 0x18	; 24
  94:	9f 70       	andi	r25, 0x0F	; 15
  96:	82 95       	swap	r24
  98:	80 7f       	andi	r24, 0xF0	; 240
  9a:	89 2b       	or	r24, r25
  9c:	88 bb       	out	0x18, r24	; 24
	LCD_PRT |= (1<<LCD_EN);			//EN=1 for H=to-L pulse
  9e:	c3 9a       	sbi	0x18, 3	; 24
  a0:	e2 e0       	ldi	r30, 0x02	; 2
  a2:	ea 95       	dec	r30
  a4:	f1 f7       	brne	.-4      	; 0xa2 <lcdCommand+0x40>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <lcdCommand+0x46>
	_delay_us(1);					//Wait to make enable wide
	LCD_PRT &= ~(1<<LCD_EN);		//EN = 0 for H-to-L pulse
  a8:	c3 98       	cbi	0x18, 3	; 24
  aa:	08 95       	ret

000000ac <lcdData>:
  ac:	e7 ec       	ldi	r30, 0xC7	; 199
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <lcdData+0x4>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <lcdData+0xa>
  b6:	00 00       	nop
//*************************************************************************************
void lcdData(unsigned char data)
{
	_delay_us(100);  //*****NEW****
	
	LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);		//Send high nibble d4-d7 to data port
  b8:	98 b3       	in	r25, 0x18	; 24
  ba:	9f 70       	andi	r25, 0x0F	; 15
  bc:	28 2f       	mov	r18, r24
  be:	20 7f       	andi	r18, 0xF0	; 240
  c0:	92 2b       	or	r25, r18
  c2:	98 bb       	out	0x18, r25	; 24
	LCD_PRT |= (1<<LCD_RS);			//RS=1 for data
  c4:	c1 9a       	sbi	0x18, 1	; 24
	LCD_PRT &= ~(1<<LCD_RW);		//RW=0 for write
  c6:	c2 98       	cbi	0x18, 2	; 24
	LCD_PRT |= (1<<LCD_EN);			//EN=1 for H=to-L pulse
  c8:	c3 9a       	sbi	0x18, 3	; 24
  ca:	f2 e0       	ldi	r31, 0x02	; 2
  cc:	fa 95       	dec	r31
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcdData+0x20>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <lcdData+0x26>
	_delay_us(1);					//Wait to make enable wide
	LCD_PRT &= ~(1<<LCD_EN);		//EN = 0 for H-to-L pulse
  d2:	c3 98       	cbi	0x18, 3	; 24
  d4:	95 e3       	ldi	r25, 0x35	; 53
  d6:	9a 95       	dec	r25
  d8:	f1 f7       	brne	.-4      	; 0xd6 <lcdData+0x2a>
  da:	00 00       	nop
	
	_delay_us(20);					//Wait to make enale wide

	LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);		//Send LOW nibble d4-d7 to data port
  dc:	98 b3       	in	r25, 0x18	; 24
  de:	9f 70       	andi	r25, 0x0F	; 15
  e0:	82 95       	swap	r24
  e2:	80 7f       	andi	r24, 0xF0	; 240
  e4:	89 2b       	or	r24, r25
  e6:	88 bb       	out	0x18, r24	; 24
	LCD_PRT |= (1<<LCD_EN);			//EN=1 for H=to-L pulse
  e8:	c3 9a       	sbi	0x18, 3	; 24
  ea:	e2 e0       	ldi	r30, 0x02	; 2
  ec:	ea 95       	dec	r30
  ee:	f1 f7       	brne	.-4      	; 0xec <lcdData+0x40>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <lcdData+0x46>
	_delay_us(1);					//Wait to make enable wide
	LCD_PRT &= ~(1<<LCD_EN);		//EN = 0 for H-to-L pulse
  f2:	c3 98       	cbi	0x18, 3	; 24
  f4:	08 95       	ret

000000f6 <lcd_init>:

}
//*************************************************************************************
void lcd_init()
{
	LCD_DDR = 0xFE;					//LCD Port is output
  f6:	8e ef       	ldi	r24, 0xFE	; 254
  f8:	87 bb       	out	0x17, r24	; 23

	LCD_PRT &= ~(1<<LCD_EN);		//LCD_EN = 0
  fa:	c3 98       	cbi	0x18, 3	; 24
  fc:	8f e9       	ldi	r24, 0x9F	; 159
  fe:	9f e0       	ldi	r25, 0x0F	; 15
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <lcd_init+0xa>
 104:	00 c0       	rjmp	.+0      	; 0x106 <lcd_init+0x10>
 106:	00 00       	nop
	_delay_us(2000);					//Wait for stable power.
	lcdCommand(0x33);				//$33 for 4-bit mode
 108:	83 e3       	ldi	r24, 0x33	; 51
 10a:	ab df       	rcall	.-170    	; 0x62 <lcdCommand>
 10c:	87 ec       	ldi	r24, 0xC7	; 199
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_init+0x1a>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_init+0x20>
 116:	00 00       	nop
	_delay_us(100);
	lcdCommand(0x32);				//$32 for 4-bit mode
 118:	82 e3       	ldi	r24, 0x32	; 50
 11a:	a3 df       	rcall	.-186    	; 0x62 <lcdCommand>
 11c:	87 ec       	ldi	r24, 0xC7	; 199
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <lcd_init+0x2a>
 124:	00 c0       	rjmp	.+0      	; 0x126 <lcd_init+0x30>
 126:	00 00       	nop
	_delay_us(100);
	lcdCommand(0x28);				//$28 for 4-bit mode
 128:	88 e2       	ldi	r24, 0x28	; 40
 12a:	9b df       	rcall	.-202    	; 0x62 <lcdCommand>
 12c:	87 ec       	ldi	r24, 0xC7	; 199
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <lcd_init+0x3a>
 134:	00 c0       	rjmp	.+0      	; 0x136 <lcd_init+0x40>
 136:	00 00       	nop
	_delay_us(100);					//wait
	lcdCommand(0x0e);				//Display on, cursor on
 138:	8e e0       	ldi	r24, 0x0E	; 14
 13a:	93 df       	rcall	.-218    	; 0x62 <lcdCommand>
 13c:	87 ec       	ldi	r24, 0xC7	; 199
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <lcd_init+0x4a>
 144:	00 c0       	rjmp	.+0      	; 0x146 <lcd_init+0x50>
 146:	00 00       	nop
	_delay_us(100);
	lcdCommand(0x01);				//Clear LCD
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	8b df       	rcall	.-234    	; 0x62 <lcdCommand>
 14c:	8f e9       	ldi	r24, 0x9F	; 159
 14e:	9f e0       	ldi	r25, 0x0F	; 15
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_init+0x5a>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcd_init+0x60>
 156:	00 00       	nop
	_delay_us(2000);
	lcdCommand(0x06);				//Shift cursor right
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	83 df       	rcall	.-250    	; 0x62 <lcdCommand>
 15c:	87 ec       	ldi	r24, 0xC7	; 199
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <__stack+0x1>
 164:	00 c0       	rjmp	.+0      	; 0x166 <__stack+0x7>
 166:	00 00       	nop
 168:	08 95       	ret

0000016a <lcd_gotoxy>:
	_delay_us(100);					//wait
}
//*************************************************************************************
void lcd_gotoxy(unsigned char x, unsigned char y)
{
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	00 d0       	rcall	.+0      	; 0x170 <lcd_gotoxy+0x6>
 170:	00 d0       	rcall	.+0      	; 0x172 <lcd_gotoxy+0x8>
 172:	cd b7       	in	r28, 0x3d	; 61
 174:	de b7       	in	r29, 0x3e	; 62
	unsigned char firstCharAdr[] = {0x80, 0xC0, 0x94, 0xD4};	//Table 12-5
 176:	90 e8       	ldi	r25, 0x80	; 128
 178:	99 83       	std	Y+1, r25	; 0x01
 17a:	90 ec       	ldi	r25, 0xC0	; 192
 17c:	9a 83       	std	Y+2, r25	; 0x02
 17e:	94 e9       	ldi	r25, 0x94	; 148
 180:	9b 83       	std	Y+3, r25	; 0x03
 182:	94 ed       	ldi	r25, 0xD4	; 212
 184:	9c 83       	std	Y+4, r25	; 0x04

	lcdCommand(firstCharAdr[y-1] + x-1);
 186:	fe 01       	movw	r30, r28
 188:	e6 0f       	add	r30, r22
 18a:	f1 1d       	adc	r31, r1
 18c:	81 50       	subi	r24, 0x01	; 1
 18e:	90 81       	ld	r25, Z
 190:	89 0f       	add	r24, r25
 192:	67 df       	rcall	.-306    	; 0x62 <lcdCommand>
 194:	87 ec       	ldi	r24, 0xC7	; 199
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <lcd_gotoxy+0x2e>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <lcd_gotoxy+0x34>
 19e:	00 00       	nop
	_delay_us(100);
}
 1a0:	0f 90       	pop	r0
 1a2:	0f 90       	pop	r0
 1a4:	0f 90       	pop	r0
 1a6:	0f 90       	pop	r0
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <lcd_print>:
//*************************************************************************************
void lcd_print(char *str)
{
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
 1b2:	cf 93       	push	r28
 1b4:	8c 01       	movw	r16, r24
	unsigned char i=0;

	while(str[i]!=0)
 1b6:	fc 01       	movw	r30, r24
 1b8:	80 81       	ld	r24, Z
 1ba:	88 23       	and	r24, r24
 1bc:	49 f0       	breq	.+18     	; 0x1d0 <lcd_print+0x22>
 1be:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcdData(str[i]);
 1c0:	75 df       	rcall	.-278    	; 0xac <lcdData>
		i++;
 1c2:	cf 5f       	subi	r28, 0xFF	; 255
//*************************************************************************************
void lcd_print(char *str)
{
	unsigned char i=0;

	while(str[i]!=0)
 1c4:	f8 01       	movw	r30, r16
 1c6:	ec 0f       	add	r30, r28
 1c8:	f1 1d       	adc	r31, r1
 1ca:	80 81       	ld	r24, Z
 1cc:	81 11       	cpse	r24, r1
 1ce:	f8 cf       	rjmp	.-16     	; 0x1c0 <lcd_print+0x12>
	{
		lcdData(str[i]);
		i++;
	}
	lcdCommand(0x0C); //Remove cursor.
 1d0:	8c e0       	ldi	r24, 0x0C	; 12
 1d2:	47 df       	rcall	.-370    	; 0x62 <lcdCommand>
}
 1d4:	cf 91       	pop	r28
 1d6:	1f 91       	pop	r17
 1d8:	0f 91       	pop	r16
 1da:	08 95       	ret

000001dc <clear_lcd>:
//*************************************************************************************
void clear_lcd()
{
	lcdCommand(0x01);				//Clear LCD
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	41 df       	rcall	.-382    	; 0x62 <lcdCommand>
 1e0:	8f e9       	ldi	r24, 0x9F	; 159
 1e2:	9f e0       	ldi	r25, 0x0F	; 15
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <clear_lcd+0x8>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <clear_lcd+0xe>
 1ea:	00 00       	nop
 1ec:	08 95       	ret

000001ee <__vector_1>:
	TCNT0 = 131;
	checkValues();//used to check time passing
}

ISR(INT0_vect)
{
 1ee:	1f 92       	push	r1
 1f0:	0f 92       	push	r0
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	0f 92       	push	r0
 1f6:	11 24       	eor	r1, r1
 1f8:	2f 93       	push	r18
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
	//used to switch between modes
	if(mode==1){
 1fe:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <mode>
 202:	81 30       	cpi	r24, 0x01	; 1
 204:	21 f4       	brne	.+8      	; 0x20e <__vector_1+0x20>
		mode = 2;
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <mode>
 20c:	0f c0       	rjmp	.+30     	; 0x22c <__vector_1+0x3e>
	}else if(mode==2){
 20e:	82 30       	cpi	r24, 0x02	; 2
 210:	21 f4       	brne	.+8      	; 0x21a <__vector_1+0x2c>
		mode = 3;
 212:	83 e0       	ldi	r24, 0x03	; 3
 214:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <mode>
 218:	09 c0       	rjmp	.+18     	; 0x22c <__vector_1+0x3e>
	}else if(mode==3){
 21a:	83 30       	cpi	r24, 0x03	; 3
 21c:	21 f4       	brne	.+8      	; 0x226 <__vector_1+0x38>
		mode=4;
 21e:	84 e0       	ldi	r24, 0x04	; 4
 220:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <mode>
 224:	03 c0       	rjmp	.+6      	; 0x22c <__vector_1+0x3e>
	}else{
		mode=1;
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <mode>
	}
	displaySet=0;
 22c:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__data_end+0x1>
 230:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 234:	2f ef       	ldi	r18, 0xFF	; 255
 236:	80 e7       	ldi	r24, 0x70	; 112
 238:	92 e0       	ldi	r25, 0x02	; 2
 23a:	21 50       	subi	r18, 0x01	; 1
 23c:	80 40       	sbci	r24, 0x00	; 0
 23e:	90 40       	sbci	r25, 0x00	; 0
 240:	e1 f7       	brne	.-8      	; 0x23a <__vector_1+0x4c>
 242:	00 c0       	rjmp	.+0      	; 0x244 <__vector_1+0x56>
 244:	00 00       	nop
	_delay_ms(100);
	while((PIND & (1<<PD2)) ==0){
 246:	82 99       	sbic	0x10, 2	; 16
 248:	0b c0       	rjmp	.+22     	; 0x260 <__vector_1+0x72>
 24a:	2f ef       	ldi	r18, 0xFF	; 255
 24c:	81 ee       	ldi	r24, 0xE1	; 225
 24e:	94 e0       	ldi	r25, 0x04	; 4
 250:	21 50       	subi	r18, 0x01	; 1
 252:	80 40       	sbci	r24, 0x00	; 0
 254:	90 40       	sbci	r25, 0x00	; 0
 256:	e1 f7       	brne	.-8      	; 0x250 <__vector_1+0x62>
 258:	00 c0       	rjmp	.+0      	; 0x25a <__vector_1+0x6c>
 25a:	00 00       	nop
 25c:	82 9b       	sbis	0x10, 2	; 16
 25e:	f5 cf       	rjmp	.-22     	; 0x24a <__vector_1+0x5c>
		_delay_ms(200);
	}
}
 260:	9f 91       	pop	r25
 262:	8f 91       	pop	r24
 264:	2f 91       	pop	r18
 266:	0f 90       	pop	r0
 268:	0f be       	out	0x3f, r0	; 63
 26a:	0f 90       	pop	r0
 26c:	1f 90       	pop	r1
 26e:	18 95       	reti

00000270 <displayMode>:

void displayMode(){
	if(displaySet == 0){
 270:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
 274:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <__data_end+0x1>
 278:	89 2b       	or	r24, r25
 27a:	61 f4       	brne	.+24     	; 0x294 <displayMode+0x24>
		lcd_gotoxy(9,2);
 27c:	62 e0       	ldi	r22, 0x02	; 2
 27e:	89 e0       	ldi	r24, 0x09	; 9
 280:	74 df       	rcall	.-280    	; 0x16a <lcd_gotoxy>
		lcd_print("              ");
 282:	84 e6       	ldi	r24, 0x64	; 100
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	93 df       	rcall	.-218    	; 0x1ae <lcd_print>
		displaySet=1;
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <__data_end+0x1>
 290:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
	}
	if(mode==1){
 294:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <mode>
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	69 f4       	brne	.+26     	; 0x2b6 <displayMode+0x46>
		lcd_gotoxy(9,2);
 29c:	62 e0       	ldi	r22, 0x02	; 2
 29e:	89 e0       	ldi	r24, 0x09	; 9
 2a0:	64 df       	rcall	.-312    	; 0x16a <lcd_gotoxy>
 2a2:	8f e5       	ldi	r24, 0x5F	; 95
 2a4:	9a ee       	ldi	r25, 0xEA	; 234
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <displayMode+0x36>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <displayMode+0x3c>
 2ac:	00 00       	nop
		_delay_ms(30);
		lcd_print("Normal");
 2ae:	83 e7       	ldi	r24, 0x73	; 115
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	7d df       	rcall	.-262    	; 0x1ae <lcd_print>
 2b4:	08 95       	ret
	}else if(mode==2){
 2b6:	82 30       	cpi	r24, 0x02	; 2
 2b8:	69 f4       	brne	.+26     	; 0x2d4 <displayMode+0x64>
		lcd_gotoxy(9,2);
 2ba:	62 e0       	ldi	r22, 0x02	; 2
 2bc:	89 e0       	ldi	r24, 0x09	; 9
 2be:	55 df       	rcall	.-342    	; 0x16a <lcd_gotoxy>
 2c0:	8f e5       	ldi	r24, 0x5F	; 95
 2c2:	9a ee       	ldi	r25, 0xEA	; 234
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <displayMode+0x54>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <displayMode+0x5a>
 2ca:	00 00       	nop
		_delay_ms(30);
		lcd_print("Set");
 2cc:	8a e7       	ldi	r24, 0x7A	; 122
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	6e df       	rcall	.-292    	; 0x1ae <lcd_print>
 2d2:	08 95       	ret
	}else if(mode==3){
 2d4:	83 30       	cpi	r24, 0x03	; 3
 2d6:	69 f4       	brne	.+26     	; 0x2f2 <displayMode+0x82>
		lcd_gotoxy(9,2);
 2d8:	62 e0       	ldi	r22, 0x02	; 2
 2da:	89 e0       	ldi	r24, 0x09	; 9
 2dc:	46 df       	rcall	.-372    	; 0x16a <lcd_gotoxy>
 2de:	8f e5       	ldi	r24, 0x5F	; 95
 2e0:	9a ee       	ldi	r25, 0xEA	; 234
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <displayMode+0x72>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <displayMode+0x78>
 2e8:	00 00       	nop
		_delay_ms(30);
		lcd_print("Alarm 1");
 2ea:	8e e7       	ldi	r24, 0x7E	; 126
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	5f df       	rcall	.-322    	; 0x1ae <lcd_print>
 2f0:	08 95       	ret
	}else{
		lcd_gotoxy(9,2);
 2f2:	62 e0       	ldi	r22, 0x02	; 2
 2f4:	89 e0       	ldi	r24, 0x09	; 9
 2f6:	39 df       	rcall	.-398    	; 0x16a <lcd_gotoxy>
 2f8:	8f e5       	ldi	r24, 0x5F	; 95
 2fa:	9a ee       	ldi	r25, 0xEA	; 234
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <displayMode+0x8c>
 300:	00 c0       	rjmp	.+0      	; 0x302 <displayMode+0x92>
 302:	00 00       	nop
		_delay_ms(30);
		lcd_print("Alarm 2");
 304:	86 e8       	ldi	r24, 0x86	; 134
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	52 df       	rcall	.-348    	; 0x1ae <lcd_print>
 30a:	08 95       	ret

0000030c <placeArrow>:
		}
	}
	placeArrow(selection); //used to place the arrow underneath the unit which the user is at
}

void placeArrow(int x){
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	ec 01       	movw	r28, r24
	lcd_gotoxy(1,2);
 312:	62 e0       	ldi	r22, 0x02	; 2
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	29 df       	rcall	.-430    	; 0x16a <lcd_gotoxy>
	lcd_print("        ");
 318:	8a e6       	ldi	r24, 0x6A	; 106
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	48 df       	rcall	.-368    	; 0x1ae <lcd_print>
	if(x==1){
 31e:	c1 30       	cpi	r28, 0x01	; 1
 320:	d1 05       	cpc	r29, r1
 322:	21 f4       	brne	.+8      	; 0x32c <placeArrow+0x20>
		lcd_gotoxy(2,2);
 324:	62 e0       	ldi	r22, 0x02	; 2
 326:	82 e0       	ldi	r24, 0x02	; 2
 328:	20 df       	rcall	.-448    	; 0x16a <lcd_gotoxy>
 32a:	09 c0       	rjmp	.+18     	; 0x33e <placeArrow+0x32>
		}else if(x==2){
 32c:	22 97       	sbiw	r28, 0x02	; 2
 32e:	21 f4       	brne	.+8      	; 0x338 <placeArrow+0x2c>
		lcd_gotoxy(5,2);
 330:	62 e0       	ldi	r22, 0x02	; 2
 332:	85 e0       	ldi	r24, 0x05	; 5
 334:	1a df       	rcall	.-460    	; 0x16a <lcd_gotoxy>
 336:	03 c0       	rjmp	.+6      	; 0x33e <placeArrow+0x32>
		}else{
		lcd_gotoxy(8,2);
 338:	62 e0       	ldi	r22, 0x02	; 2
 33a:	88 e0       	ldi	r24, 0x08	; 8
 33c:	16 df       	rcall	.-468    	; 0x16a <lcd_gotoxy>
	}
	lcd_print("^");
 33e:	8e e8       	ldi	r24, 0x8E	; 142
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	35 df       	rcall	.-406    	; 0x1ae <lcd_print>
}
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	08 95       	ret

0000034a <selectUnit>:
		}
	}
}

void selectUnit(){
	if((PIND & (1<<PD3)) ==0){
 34a:	83 99       	sbic	0x10, 3	; 16
 34c:	1f c0       	rjmp	.+62     	; 0x38c <selectUnit+0x42>
		if(selection==1){
 34e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 352:	81 30       	cpi	r24, 0x01	; 1
 354:	31 f4       	brne	.+12     	; 0x362 <selectUnit+0x18>
			selection=2;
 356:	82 e0       	ldi	r24, 0x02	; 2
 358:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		}else if(selection==2){
			selection=3;
		}else{
			selection=1;
		}
		while((PIND & (1<<PD3)) ==0){
 35c:	83 9b       	sbis	0x10, 3	; 16
 35e:	0b c0       	rjmp	.+22     	; 0x376 <selectUnit+0x2c>
 360:	15 c0       	rjmp	.+42     	; 0x38c <selectUnit+0x42>

void selectUnit(){
	if((PIND & (1<<PD3)) ==0){
		if(selection==1){
			selection=2;
		}else if(selection==2){
 362:	82 30       	cpi	r24, 0x02	; 2
 364:	21 f4       	brne	.+8      	; 0x36e <selectUnit+0x24>
			selection=3;
 366:	83 e0       	ldi	r24, 0x03	; 3
 368:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 36c:	f7 cf       	rjmp	.-18     	; 0x35c <selectUnit+0x12>
		}else{
			selection=1;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 374:	f3 cf       	rjmp	.-26     	; 0x35c <selectUnit+0x12>
 376:	2f ef       	ldi	r18, 0xFF	; 255
 378:	80 e7       	ldi	r24, 0x70	; 112
 37a:	92 e0       	ldi	r25, 0x02	; 2
 37c:	21 50       	subi	r18, 0x01	; 1
 37e:	80 40       	sbci	r24, 0x00	; 0
 380:	90 40       	sbci	r25, 0x00	; 0
 382:	e1 f7       	brne	.-8      	; 0x37c <selectUnit+0x32>
 384:	00 c0       	rjmp	.+0      	; 0x386 <selectUnit+0x3c>
 386:	00 00       	nop
		}
		while((PIND & (1<<PD3)) ==0){
 388:	83 9b       	sbis	0x10, 3	; 16
 38a:	f5 cf       	rjmp	.-22     	; 0x376 <selectUnit+0x2c>
			_delay_ms(100);
		}
	}
	if((PIND & (1<<PD4)) ==0){
 38c:	84 99       	sbic	0x10, 4	; 16
 38e:	21 c0       	rjmp	.+66     	; 0x3d2 <selectUnit+0x88>
		//set selected variable, indicating the user has selected a unit
		if(mode==2){
 390:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <mode>
 394:	82 30       	cpi	r24, 0x02	; 2
 396:	31 f4       	brne	.+12     	; 0x3a4 <selectUnit+0x5a>
			selected = 1;
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <selected>
			}else if(mode==3){
			selected=2;
			}else if(mode==4){
			selected=3;
		}
		while((PIND & (1<<PD4)) ==0){
 39e:	84 9b       	sbis	0x10, 4	; 16
 3a0:	0d c0       	rjmp	.+26     	; 0x3bc <selectUnit+0x72>
 3a2:	17 c0       	rjmp	.+46     	; 0x3d2 <selectUnit+0x88>
	}
	if((PIND & (1<<PD4)) ==0){
		//set selected variable, indicating the user has selected a unit
		if(mode==2){
			selected = 1;
			}else if(mode==3){
 3a4:	83 30       	cpi	r24, 0x03	; 3
 3a6:	21 f4       	brne	.+8      	; 0x3b0 <selectUnit+0x66>
			selected=2;
 3a8:	82 e0       	ldi	r24, 0x02	; 2
 3aa:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <selected>
 3ae:	f7 cf       	rjmp	.-18     	; 0x39e <selectUnit+0x54>
			}else if(mode==4){
 3b0:	84 30       	cpi	r24, 0x04	; 4
 3b2:	a9 f7       	brne	.-22     	; 0x39e <selectUnit+0x54>
			selected=3;
 3b4:	83 e0       	ldi	r24, 0x03	; 3
 3b6:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <selected>
 3ba:	f1 cf       	rjmp	.-30     	; 0x39e <selectUnit+0x54>
 3bc:	2f ef       	ldi	r18, 0xFF	; 255
 3be:	80 e7       	ldi	r24, 0x70	; 112
 3c0:	92 e0       	ldi	r25, 0x02	; 2
 3c2:	21 50       	subi	r18, 0x01	; 1
 3c4:	80 40       	sbci	r24, 0x00	; 0
 3c6:	90 40       	sbci	r25, 0x00	; 0
 3c8:	e1 f7       	brne	.-8      	; 0x3c2 <selectUnit+0x78>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <selectUnit+0x82>
 3cc:	00 00       	nop
		}
		while((PIND & (1<<PD4)) ==0){
 3ce:	84 9b       	sbis	0x10, 4	; 16
 3d0:	f5 cf       	rjmp	.-22     	; 0x3bc <selectUnit+0x72>
			_delay_ms(100);
		}
	}
	placeArrow(selection); //used to place the arrow underneath the unit which the user is at
 3d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	99 df       	rcall	.-206    	; 0x30c <placeArrow>
 3da:	08 95       	ret

000003dc <setTime>:
		lcd_print("Alarm 2");
	}
}

void setTime(){
	if(selected==0){
 3dc:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <selected>
 3e0:	81 11       	cpse	r24, r1
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <setTime+0xc>
		//If user has not selected a unit then allow user to do so
		selectUnit();
 3e4:	b2 df       	rcall	.-156    	; 0x34a <selectUnit>
 3e6:	08 95       	ret
		}else{
		//based on unit selected by user increment or decrement corresponding variable
		if((PIND & (1<<PD3))==0){
 3e8:	83 99       	sbic	0x10, 3	; 16
 3ea:	7c c0       	rjmp	.+248    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
			if(selection== 1){
 3ec:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 3f0:	81 30       	cpi	r24, 0x01	; 1
 3f2:	71 f4       	brne	.+28     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
				tempHr++;
 3f4:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <tempHr>
 3f8:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <tempHr+0x1>
 3fc:	01 96       	adiw	r24, 0x01	; 1
				if(tempHr>23){
 3fe:	88 31       	cpi	r24, 0x18	; 24
 400:	91 05       	cpc	r25, r1
 402:	0c f4       	brge	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 404:	0a c1       	rjmp	.+532    	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
					tempHr=0;
 406:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <tempHr+0x1>
 40a:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <tempHr>
 40e:	23 c0       	rjmp	.+70     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
				}
			}
			if(selection== 2){
 410:	82 30       	cpi	r24, 0x02	; 2
 412:	71 f4       	brne	.+28     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
				tempMin++;
 414:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <tempMin>
 418:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <tempMin+0x1>
 41c:	01 96       	adiw	r24, 0x01	; 1
				if(tempMin>59){
 41e:	8c 33       	cpi	r24, 0x3C	; 60
 420:	91 05       	cpc	r25, r1
 422:	0c f4       	brge	.+2      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 424:	ff c0       	rjmp	.+510    	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
					tempMin=0;
 426:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <tempMin+0x1>
 42a:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <tempMin>
 42e:	13 c0       	rjmp	.+38     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
				}
			}
			if(selection==3){
 430:	83 30       	cpi	r24, 0x03	; 3
 432:	89 f4       	brne	.+34     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
				tempSec++;
 434:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <tempSec>
 438:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <tempSec+0x1>
 43c:	01 96       	adiw	r24, 0x01	; 1
				if(tempSec>59){
 43e:	8c 33       	cpi	r24, 0x3C	; 60
 440:	91 05       	cpc	r25, r1
 442:	2c f4       	brge	.+10     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
				if(tempMin>59){
					tempMin=0;
				}
			}
			if(selection==3){
				tempSec++;
 444:	90 93 ba 00 	sts	0x00BA, r25	; 0x8000ba <tempSec+0x1>
 448:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <tempSec>
 44c:	04 c0       	rjmp	.+8      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
				if(tempSec>59){
					tempSec=0;
 44e:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <tempSec+0x1>
 452:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <tempSec>
				}
			}
			while((PIND & (1<<PD3))==0){
 456:	83 99       	sbic	0x10, 3	; 16
 458:	14 c0       	rjmp	.+40     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 45a:	2f ef       	ldi	r18, 0xFF	; 255
 45c:	80 e7       	ldi	r24, 0x70	; 112
 45e:	92 e0       	ldi	r25, 0x02	; 2
 460:	21 50       	subi	r18, 0x01	; 1
 462:	80 40       	sbci	r24, 0x00	; 0
 464:	90 40       	sbci	r25, 0x00	; 0
 466:	e1 f7       	brne	.-8      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 468:	00 c0       	rjmp	.+0      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 46a:	00 00       	nop
				_delay_ms(100);
				longPress++;//incremented every 100 ms
 46c:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <longPress>
 470:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <longPress+0x1>
 474:	01 96       	adiw	r24, 0x01	; 1
 476:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <longPress+0x1>
 47a:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <longPress>
				tempSec++;
				if(tempSec>59){
					tempSec=0;
				}
			}
			while((PIND & (1<<PD3))==0){
 47e:	83 9b       	sbis	0x10, 3	; 16
 480:	ec cf       	rjmp	.-40     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
				_delay_ms(100);
				longPress++;//incremented every 100 ms
			}
			if(longPress>=10){//if value is >=10. Then 10*100ms = 1s has passed. Allow user to reselect a unit
 482:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <longPress>
 486:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <longPress+0x1>
 48a:	0a 97       	sbiw	r24, 0x0a	; 10
 48c:	3c f1       	brlt	.+78     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
				selected=0;
 48e:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <selected>
				switch(selection){
 492:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 496:	82 30       	cpi	r24, 0x02	; 2
 498:	71 f0       	breq	.+28     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 49a:	83 30       	cpi	r24, 0x03	; 3
 49c:	b1 f0       	breq	.+44     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 49e:	81 30       	cpi	r24, 0x01	; 1
 4a0:	e9 f4       	brne	.+58     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
					case 1:
					tempHr--;
 4a2:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <tempHr>
 4a6:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <tempHr+0x1>
 4aa:	01 97       	sbiw	r24, 0x01	; 1
 4ac:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <tempHr+0x1>
 4b0:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <tempHr>
					break;
 4b4:	13 c0       	rjmp	.+38     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
					case 2:
					tempMin--;
 4b6:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <tempMin>
 4ba:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <tempMin+0x1>
 4be:	01 97       	sbiw	r24, 0x01	; 1
 4c0:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <tempMin+0x1>
 4c4:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <tempMin>
					break;
 4c8:	09 c0       	rjmp	.+18     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
					case 3:
					tempSec--;
 4ca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <tempSec>
 4ce:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <tempSec+0x1>
 4d2:	01 97       	sbiw	r24, 0x01	; 1
 4d4:	90 93 ba 00 	sts	0x00BA, r25	; 0x8000ba <tempSec+0x1>
 4d8:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <tempSec>
					break;
				}
			}
			longPress=0;
 4dc:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <longPress+0x1>
 4e0:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <longPress>
		}
		if((PIND & (1<<PD4))==0){
 4e4:	84 99       	sbic	0x10, 4	; 16
 4e6:	7c c0       	rjmp	.+248    	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
			if(selection== 1){
 4e8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 4ec:	81 30       	cpi	r24, 0x01	; 1
 4ee:	71 f4       	brne	.+28     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
				tempHr--;
 4f0:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <tempHr>
 4f4:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <tempHr+0x1>
 4f8:	01 97       	sbiw	r24, 0x01	; 1
				if(tempHr<0){
 4fa:	0a f0       	brmi	.+2      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 4fc:	98 c0       	rjmp	.+304    	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
					tempHr=23;
 4fe:	87 e1       	ldi	r24, 0x17	; 23
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <tempHr+0x1>
 506:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <tempHr>
 50a:	23 c0       	rjmp	.+70     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
				}
			}
			if(selection== 2){
 50c:	82 30       	cpi	r24, 0x02	; 2
 50e:	71 f4       	brne	.+28     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
				tempMin--;
 510:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <tempMin>
 514:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <tempMin+0x1>
 518:	01 97       	sbiw	r24, 0x01	; 1
				if(tempMin<0){
 51a:	0a f0       	brmi	.+2      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 51c:	8d c0       	rjmp	.+282    	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
					tempMin=59;
 51e:	8b e3       	ldi	r24, 0x3B	; 59
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <tempMin+0x1>
 526:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <tempMin>
 52a:	13 c0       	rjmp	.+38     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
				}
			}
			if(selection== 3){
 52c:	83 30       	cpi	r24, 0x03	; 3
 52e:	89 f4       	brne	.+34     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
				tempSec--;
 530:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <tempSec>
 534:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <tempSec+0x1>
 538:	01 97       	sbiw	r24, 0x01	; 1
				if(tempSec<0){
 53a:	2a f0       	brmi	.+10     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
				if(tempMin<0){
					tempMin=59;
				}
			}
			if(selection== 3){
				tempSec--;
 53c:	90 93 ba 00 	sts	0x00BA, r25	; 0x8000ba <tempSec+0x1>
 540:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <tempSec>
 544:	06 c0       	rjmp	.+12     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
				if(tempSec<0){
					tempSec=59;
 546:	8b e3       	ldi	r24, 0x3B	; 59
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	90 93 ba 00 	sts	0x00BA, r25	; 0x8000ba <tempSec+0x1>
 54e:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <tempSec>
				}
			}
			while((PIND & (1<<PD4))==0){
 552:	84 99       	sbic	0x10, 4	; 16
 554:	14 c0       	rjmp	.+40     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 556:	2f ef       	ldi	r18, 0xFF	; 255
 558:	80 e7       	ldi	r24, 0x70	; 112
 55a:	92 e0       	ldi	r25, 0x02	; 2
 55c:	21 50       	subi	r18, 0x01	; 1
 55e:	80 40       	sbci	r24, 0x00	; 0
 560:	90 40       	sbci	r25, 0x00	; 0
 562:	e1 f7       	brne	.-8      	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
 564:	00 c0       	rjmp	.+0      	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
 566:	00 00       	nop
				_delay_ms(100);
				longPress++;
 568:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <longPress>
 56c:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <longPress+0x1>
 570:	01 96       	adiw	r24, 0x01	; 1
 572:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <longPress+0x1>
 576:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <longPress>
				tempSec--;
				if(tempSec<0){
					tempSec=59;
				}
			}
			while((PIND & (1<<PD4))==0){
 57a:	84 9b       	sbis	0x10, 4	; 16
 57c:	ec cf       	rjmp	.-40     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
				_delay_ms(100);
				longPress++;
			}
			if(longPress>=10){//if value is >=10. Then 10*100ms = 1s has passed. Allow user to reselect a unit
 57e:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <longPress>
 582:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <longPress+0x1>
 586:	0a 97       	sbiw	r24, 0x0a	; 10
 588:	3c f1       	brlt	.+78     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
				selected=0;
 58a:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <selected>
				switch(selection){
 58e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 592:	82 30       	cpi	r24, 0x02	; 2
 594:	71 f0       	breq	.+28     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 596:	83 30       	cpi	r24, 0x03	; 3
 598:	b1 f0       	breq	.+44     	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
 59a:	81 30       	cpi	r24, 0x01	; 1
 59c:	e9 f4       	brne	.+58     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
					case 1:
					tempHr++;
 59e:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <tempHr>
 5a2:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <tempHr+0x1>
 5a6:	01 96       	adiw	r24, 0x01	; 1
 5a8:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <tempHr+0x1>
 5ac:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <tempHr>
					break;
 5b0:	13 c0       	rjmp	.+38     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
					case 2:
					tempMin++;
 5b2:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <tempMin>
 5b6:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <tempMin+0x1>
 5ba:	01 96       	adiw	r24, 0x01	; 1
 5bc:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <tempMin+0x1>
 5c0:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <tempMin>
					break;
 5c4:	09 c0       	rjmp	.+18     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
					case 3:
					tempSec++;
 5c6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <tempSec>
 5ca:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <tempSec+0x1>
 5ce:	01 96       	adiw	r24, 0x01	; 1
 5d0:	90 93 ba 00 	sts	0x00BA, r25	; 0x8000ba <tempSec+0x1>
 5d4:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <tempSec>
					break;
				}
			}
			longPress=0;
 5d8:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <longPress+0x1>
 5dc:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <longPress>
		}
		
		//Set indicator of the mode which the user selected a unit in. Able to set correct variables in main loop
		if(selected==1){
 5e0:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <selected>
 5e4:	81 30       	cpi	r24, 0x01	; 1
 5e6:	39 f4       	brne	.+14     	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
			prevMode = 1;
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <prevMode+0x1>
 5f0:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <prevMode>
 5f4:	08 95       	ret
		}else if(selected==2){
 5f6:	82 30       	cpi	r24, 0x02	; 2
 5f8:	39 f4       	brne	.+14     	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
			prevMode = 2;
 5fa:	82 e0       	ldi	r24, 0x02	; 2
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <prevMode+0x1>
 602:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <prevMode>
 606:	08 95       	ret
		}else if(selected==3){
 608:	83 30       	cpi	r24, 0x03	; 3
 60a:	d9 f4       	brne	.+54     	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
			prevMode=3;
 60c:	83 e0       	ldi	r24, 0x03	; 3
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <prevMode+0x1>
 614:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <prevMode>
		}
	}
}
 618:	08 95       	ret
		selectUnit();
		}else{
		//based on unit selected by user increment or decrement corresponding variable
		if((PIND & (1<<PD3))==0){
			if(selection== 1){
				tempHr++;
 61a:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <tempHr+0x1>
 61e:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <tempHr>
 622:	19 cf       	rjmp	.-462    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
				if(tempHr>23){
					tempHr=0;
				}
			}
			if(selection== 2){
				tempMin++;
 624:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <tempMin+0x1>
 628:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <tempMin>
 62c:	14 cf       	rjmp	.-472    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
			}
			longPress=0;
		}
		if((PIND & (1<<PD4))==0){
			if(selection== 1){
				tempHr--;
 62e:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <tempHr+0x1>
 632:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <tempHr>
 636:	8d cf       	rjmp	.-230    	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
				if(tempHr<0){
					tempHr=23;
				}
			}
			if(selection== 2){
				tempMin--;
 638:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <tempMin+0x1>
 63c:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <tempMin>
 640:	88 cf       	rjmp	.-240    	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
 642:	08 95       	ret

00000644 <checkValues>:
	}
	lcd_print("^");
}

void checkValues(void){
	if(mill>=1000){
 644:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <mill>
 648:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <mill+0x1>
 64c:	88 3e       	cpi	r24, 0xE8	; 232
 64e:	93 40       	sbci	r25, 0x03	; 3
 650:	6c f0       	brlt	.+26     	; 0x66c <checkValues+0x28>
		sec++;
 652:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <sec>
 656:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <sec+0x1>
 65a:	01 96       	adiw	r24, 0x01	; 1
 65c:	90 93 be 00 	sts	0x00BE, r25	; 0x8000be <sec+0x1>
 660:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <sec>
		mill = 0;
 664:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <mill+0x1>
 668:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <mill>
	}
	if(sec >= 60){
 66c:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <sec>
 670:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <sec+0x1>
 674:	cc 97       	sbiw	r24, 0x3c	; 60
 676:	8c f0       	brlt	.+34     	; 0x69a <checkValues+0x56>
		min++;
 678:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <min>
 67c:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <min+0x1>
 680:	01 96       	adiw	r24, 0x01	; 1
 682:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <min+0x1>
 686:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <min>
		sec = 0;
 68a:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <sec+0x1>
 68e:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <sec>
		mill = 0;
 692:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <mill+0x1>
 696:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <mill>
	}
	if(min >= 60){
 69a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <min>
 69e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <min+0x1>
 6a2:	cc 97       	sbiw	r24, 0x3c	; 60
 6a4:	ac f0       	brlt	.+42     	; 0x6d0 <checkValues+0x8c>
		hr++;
 6a6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <hr>
 6aa:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <hr+0x1>
 6ae:	01 96       	adiw	r24, 0x01	; 1
 6b0:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <hr+0x1>
 6b4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <hr>
		min = 0;
 6b8:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <min+0x1>
 6bc:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <min>
		sec = 0;
 6c0:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <sec+0x1>
 6c4:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <sec>
		mill = 0;
 6c8:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <mill+0x1>
 6cc:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <mill>
 6d0:	08 95       	ret

000006d2 <__vector_6>:
		displayMode();
		displayLCD(mode);//used to display time or tempTime based on mode
	}
}

ISR(TIMER0_OVF_vect){
 6d2:	1f 92       	push	r1
 6d4:	0f 92       	push	r0
 6d6:	0f b6       	in	r0, 0x3f	; 63
 6d8:	0f 92       	push	r0
 6da:	11 24       	eor	r1, r1
 6dc:	2f 93       	push	r18
 6de:	3f 93       	push	r19
 6e0:	4f 93       	push	r20
 6e2:	5f 93       	push	r21
 6e4:	6f 93       	push	r22
 6e6:	7f 93       	push	r23
 6e8:	8f 93       	push	r24
 6ea:	9f 93       	push	r25
 6ec:	af 93       	push	r26
 6ee:	bf 93       	push	r27
 6f0:	ef 93       	push	r30
 6f2:	ff 93       	push	r31
	//Interrupt triggered every millisecond
	mill++;
 6f4:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <mill>
 6f8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <mill+0x1>
 6fc:	01 96       	adiw	r24, 0x01	; 1
 6fe:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <mill+0x1>
 702:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <mill>
	TCNT0 = 131;
 706:	83 e8       	ldi	r24, 0x83	; 131
 708:	82 bf       	out	0x32, r24	; 50
	checkValues();//used to check time passing
 70a:	9c df       	rcall	.-200    	; 0x644 <checkValues>
}
 70c:	ff 91       	pop	r31
 70e:	ef 91       	pop	r30
 710:	bf 91       	pop	r27
 712:	af 91       	pop	r26
 714:	9f 91       	pop	r25
 716:	8f 91       	pop	r24
 718:	7f 91       	pop	r23
 71a:	6f 91       	pop	r22
 71c:	5f 91       	pop	r21
 71e:	4f 91       	pop	r20
 720:	3f 91       	pop	r19
 722:	2f 91       	pop	r18
 724:	0f 90       	pop	r0
 726:	0f be       	out	0x3f, r0	; 63
 728:	0f 90       	pop	r0
 72a:	1f 90       	pop	r1
 72c:	18 95       	reti

0000072e <alarmRoutine>:
	lcd_print(":");
	lcd_gotoxy(9,1);
}

void alarmRoutine(){
	lcd_gotoxy(1,2);
 72e:	62 e0       	ldi	r22, 0x02	; 2
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	1b dd       	rcall	.-1482   	; 0x16a <lcd_gotoxy>
	lcd_print("ALARM TIME");
 734:	80 e9       	ldi	r24, 0x90	; 144
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	3a dd       	rcall	.-1420   	; 0x1ae <lcd_print>
	alarmHr = 0;
 73a:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <alarmHr+0x1>
 73e:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <alarmHr>
	alarmSec=0;
 742:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <alarmSec+0x1>
 746:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <alarmSec>
	alarmMin=0;
 74a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <alarmMin+0x1>
 74e:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <alarmMin>
	alarmSet=0;
 752:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <alarmSet+0x1>
 756:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <alarmSet>
	int counter =0;
	PORTB |= (1 << PB0);
 75a:	c0 9a       	sbi	0x18, 0	; 24
	while(counter < 60){
		if(mill>=1000){
 75c:	20 91 bf 00 	lds	r18, 0x00BF	; 0x8000bf <mill>
 760:	30 91 c0 00 	lds	r19, 0x00C0	; 0x8000c0 <mill+0x1>
	lcd_print("ALARM TIME");
	alarmHr = 0;
	alarmSec=0;
	alarmMin=0;
	alarmSet=0;
	int counter =0;
 764:	80 e0       	ldi	r24, 0x00	; 0
 766:	90 e0       	ldi	r25, 0x00	; 0
	PORTB |= (1 << PB0);
	while(counter < 60){
		if(mill>=1000){
 768:	28 3e       	cpi	r18, 0xE8	; 232
 76a:	43 e0       	ldi	r20, 0x03	; 3
 76c:	34 07       	cpc	r19, r20
 76e:	0c f0       	brlt	.+2      	; 0x772 <alarmRoutine+0x44>
			counter++;
 770:	01 96       	adiw	r24, 0x01	; 1
		}
		if((PIND & (1<<PD2))==0){
 772:	82 9b       	sbis	0x10, 2	; 16
 774:	07 c0       	rjmp	.+14     	; 0x784 <alarmRoutine+0x56>
			break;
		}
		if((PIND & (1<<PD3))==0){
 776:	83 9b       	sbis	0x10, 3	; 16
 778:	05 c0       	rjmp	.+10     	; 0x784 <alarmRoutine+0x56>
			break;
		}
			
		if((PIND & (1<<PD4))==0){
 77a:	84 9b       	sbis	0x10, 4	; 16
 77c:	03 c0       	rjmp	.+6      	; 0x784 <alarmRoutine+0x56>
	alarmSec=0;
	alarmMin=0;
	alarmSet=0;
	int counter =0;
	PORTB |= (1 << PB0);
	while(counter < 60){
 77e:	8c 33       	cpi	r24, 0x3C	; 60
 780:	91 05       	cpc	r25, r1
 782:	94 f3       	brlt	.-28     	; 0x768 <alarmRoutine+0x3a>
			
		if((PIND & (1<<PD4))==0){
			break;
		}
	}
	PORTB &= ~(1<<PB0);
 784:	c0 98       	cbi	0x18, 0	; 24
 786:	08 95       	ret

00000788 <toDisplay>:
}

void toDisplay(int x, int y, int z){
 788:	ef 92       	push	r14
 78a:	ff 92       	push	r15
 78c:	0f 93       	push	r16
 78e:	1f 93       	push	r17
 790:	cf 93       	push	r28
 792:	df 93       	push	r29
 794:	7c 01       	movw	r14, r24
 796:	8b 01       	movw	r16, r22
 798:	ea 01       	movw	r28, r20
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 79a:	4a e0       	ldi	r20, 0x0A	; 10
 79c:	61 ec       	ldi	r22, 0xC1	; 193
 79e:	70 e0       	ldi	r23, 0x00	; 0
 7a0:	e4 d1       	rcall	.+968    	; 0xb6a <__itoa_ncheck>
	itoa(x,str,10);
	if(x<10){
 7a2:	8a e0       	ldi	r24, 0x0A	; 10
 7a4:	e8 16       	cp	r14, r24
 7a6:	f1 04       	cpc	r15, r1
 7a8:	6c f4       	brge	.+26     	; 0x7c4 <toDisplay+0x3c>
		lcd_gotoxy(1,1);
 7aa:	61 e0       	ldi	r22, 0x01	; 1
 7ac:	81 e0       	ldi	r24, 0x01	; 1
 7ae:	dd dc       	rcall	.-1606   	; 0x16a <lcd_gotoxy>
		lcd_print("0");
 7b0:	8b e9       	ldi	r24, 0x9B	; 155
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	fc dc       	rcall	.-1544   	; 0x1ae <lcd_print>
		lcd_gotoxy(2,1);
 7b6:	61 e0       	ldi	r22, 0x01	; 1
 7b8:	82 e0       	ldi	r24, 0x02	; 2
 7ba:	d7 dc       	rcall	.-1618   	; 0x16a <lcd_gotoxy>
		lcd_print(str);
 7bc:	81 ec       	ldi	r24, 0xC1	; 193
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	f6 dc       	rcall	.-1556   	; 0x1ae <lcd_print>
 7c2:	06 c0       	rjmp	.+12     	; 0x7d0 <toDisplay+0x48>
		}else{
		lcd_gotoxy(1,1);
 7c4:	61 e0       	ldi	r22, 0x01	; 1
 7c6:	81 e0       	ldi	r24, 0x01	; 1
 7c8:	d0 dc       	rcall	.-1632   	; 0x16a <lcd_gotoxy>
		lcd_print(str);
 7ca:	81 ec       	ldi	r24, 0xC1	; 193
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	ef dc       	rcall	.-1570   	; 0x1ae <lcd_print>
 7d0:	4a e0       	ldi	r20, 0x0A	; 10
 7d2:	61 ec       	ldi	r22, 0xC1	; 193
 7d4:	70 e0       	ldi	r23, 0x00	; 0
 7d6:	c8 01       	movw	r24, r16
 7d8:	c8 d1       	rcall	.+912    	; 0xb6a <__itoa_ncheck>
	}
	itoa(y,str,10);
	if(y<10){
 7da:	0a 30       	cpi	r16, 0x0A	; 10
 7dc:	11 05       	cpc	r17, r1
 7de:	6c f4       	brge	.+26     	; 0x7fa <toDisplay+0x72>
		lcd_gotoxy(4,1);
 7e0:	61 e0       	ldi	r22, 0x01	; 1
 7e2:	84 e0       	ldi	r24, 0x04	; 4
 7e4:	c2 dc       	rcall	.-1660   	; 0x16a <lcd_gotoxy>
		lcd_print("0");
 7e6:	8b e9       	ldi	r24, 0x9B	; 155
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	e1 dc       	rcall	.-1598   	; 0x1ae <lcd_print>
		lcd_gotoxy(5,1);
 7ec:	61 e0       	ldi	r22, 0x01	; 1
 7ee:	85 e0       	ldi	r24, 0x05	; 5
 7f0:	bc dc       	rcall	.-1672   	; 0x16a <lcd_gotoxy>
		lcd_print(str);
 7f2:	81 ec       	ldi	r24, 0xC1	; 193
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	db dc       	rcall	.-1610   	; 0x1ae <lcd_print>
 7f8:	06 c0       	rjmp	.+12     	; 0x806 <toDisplay+0x7e>
		}else{
		lcd_gotoxy(4,1);
 7fa:	61 e0       	ldi	r22, 0x01	; 1
 7fc:	84 e0       	ldi	r24, 0x04	; 4
 7fe:	b5 dc       	rcall	.-1686   	; 0x16a <lcd_gotoxy>
		lcd_print(str);
 800:	81 ec       	ldi	r24, 0xC1	; 193
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	d4 dc       	rcall	.-1624   	; 0x1ae <lcd_print>
 806:	4a e0       	ldi	r20, 0x0A	; 10
 808:	61 ec       	ldi	r22, 0xC1	; 193
 80a:	70 e0       	ldi	r23, 0x00	; 0
 80c:	ce 01       	movw	r24, r28
 80e:	ad d1       	rcall	.+858    	; 0xb6a <__itoa_ncheck>
	}
	itoa(z,str,10);
	if(z<10){
 810:	2a 97       	sbiw	r28, 0x0a	; 10
 812:	6c f4       	brge	.+26     	; 0x82e <toDisplay+0xa6>
		lcd_gotoxy(7,1);
 814:	61 e0       	ldi	r22, 0x01	; 1
 816:	87 e0       	ldi	r24, 0x07	; 7
 818:	a8 dc       	rcall	.-1712   	; 0x16a <lcd_gotoxy>
		lcd_print("0");
 81a:	8b e9       	ldi	r24, 0x9B	; 155
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	c7 dc       	rcall	.-1650   	; 0x1ae <lcd_print>
		lcd_gotoxy(8,1);
 820:	61 e0       	ldi	r22, 0x01	; 1
 822:	88 e0       	ldi	r24, 0x08	; 8
 824:	a2 dc       	rcall	.-1724   	; 0x16a <lcd_gotoxy>
		lcd_print(str);
 826:	81 ec       	ldi	r24, 0xC1	; 193
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	c1 dc       	rcall	.-1662   	; 0x1ae <lcd_print>
 82c:	06 c0       	rjmp	.+12     	; 0x83a <toDisplay+0xb2>
		}else{
		lcd_gotoxy(7,1);
 82e:	61 e0       	ldi	r22, 0x01	; 1
 830:	87 e0       	ldi	r24, 0x07	; 7
 832:	9b dc       	rcall	.-1738   	; 0x16a <lcd_gotoxy>
		lcd_print(str);
 834:	81 ec       	ldi	r24, 0xC1	; 193
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	ba dc       	rcall	.-1676   	; 0x1ae <lcd_print>
	}
}
 83a:	df 91       	pop	r29
 83c:	cf 91       	pop	r28
 83e:	1f 91       	pop	r17
 840:	0f 91       	pop	r16
 842:	ff 90       	pop	r15
 844:	ef 90       	pop	r14
 846:	08 95       	ret

00000848 <displayLCD>:
		mill = 0;
	}
}

void displayLCD(int x){
	if(x==1){
 848:	81 30       	cpi	r24, 0x01	; 1
 84a:	91 05       	cpc	r25, r1
 84c:	71 f4       	brne	.+28     	; 0x86a <displayLCD+0x22>
		toDisplay(hr,min,sec);
 84e:	40 91 bd 00 	lds	r20, 0x00BD	; 0x8000bd <sec>
 852:	50 91 be 00 	lds	r21, 0x00BE	; 0x8000be <sec+0x1>
 856:	60 91 bb 00 	lds	r22, 0x00BB	; 0x8000bb <min>
 85a:	70 91 bc 00 	lds	r23, 0x00BC	; 0x8000bc <min+0x1>
 85e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <hr>
 862:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <hr+0x1>
 866:	90 df       	rcall	.-224    	; 0x788 <toDisplay>
 868:	10 c0       	rjmp	.+32     	; 0x88a <displayLCD+0x42>
		}else if(x==2||x==3||x==4){
 86a:	02 97       	sbiw	r24, 0x02	; 2
 86c:	03 97       	sbiw	r24, 0x03	; 3
 86e:	68 f4       	brcc	.+26     	; 0x88a <displayLCD+0x42>
		toDisplay(tempHr,tempMin,tempSec);
 870:	40 91 b9 00 	lds	r20, 0x00B9	; 0x8000b9 <tempSec>
 874:	50 91 ba 00 	lds	r21, 0x00BA	; 0x8000ba <tempSec+0x1>
 878:	60 91 b7 00 	lds	r22, 0x00B7	; 0x8000b7 <tempMin>
 87c:	70 91 b8 00 	lds	r23, 0x00B8	; 0x8000b8 <tempMin+0x1>
 880:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <tempHr>
 884:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <tempHr+0x1>
 888:	7f df       	rcall	.-258    	; 0x788 <toDisplay>
	}
	if(((hr==alarmHr && sec==alarmSec && min == alarmMin)||(hr==alarmHr2 && sec==alarmSec2 && min == alarmMin2)) && alarmSet==1){
 88a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <hr>
 88e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <hr+0x1>
 892:	20 91 af 00 	lds	r18, 0x00AF	; 0x8000af <alarmHr>
 896:	30 91 b0 00 	lds	r19, 0x00B0	; 0x8000b0 <alarmHr+0x1>
 89a:	82 17       	cp	r24, r18
 89c:	93 07       	cpc	r25, r19
 89e:	b1 f4       	brne	.+44     	; 0x8cc <displayLCD+0x84>
 8a0:	40 91 bd 00 	lds	r20, 0x00BD	; 0x8000bd <sec>
 8a4:	50 91 be 00 	lds	r21, 0x00BE	; 0x8000be <sec+0x1>
 8a8:	20 91 b3 00 	lds	r18, 0x00B3	; 0x8000b3 <alarmSec>
 8ac:	30 91 b4 00 	lds	r19, 0x00B4	; 0x8000b4 <alarmSec+0x1>
 8b0:	42 17       	cp	r20, r18
 8b2:	53 07       	cpc	r21, r19
 8b4:	59 f4       	brne	.+22     	; 0x8cc <displayLCD+0x84>
 8b6:	40 91 bb 00 	lds	r20, 0x00BB	; 0x8000bb <min>
 8ba:	50 91 bc 00 	lds	r21, 0x00BC	; 0x8000bc <min+0x1>
 8be:	20 91 b1 00 	lds	r18, 0x00B1	; 0x8000b1 <alarmMin>
 8c2:	30 91 b2 00 	lds	r19, 0x00B2	; 0x8000b2 <alarmMin+0x1>
 8c6:	42 17       	cp	r20, r18
 8c8:	53 07       	cpc	r21, r19
 8ca:	e9 f0       	breq	.+58     	; 0x906 <displayLCD+0xbe>
 8cc:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <alarmHr2>
 8d0:	30 91 aa 00 	lds	r19, 0x00AA	; 0x8000aa <alarmHr2+0x1>
 8d4:	82 17       	cp	r24, r18
 8d6:	93 07       	cpc	r25, r19
 8d8:	e9 f4       	brne	.+58     	; 0x914 <displayLCD+0xcc>
 8da:	20 91 bd 00 	lds	r18, 0x00BD	; 0x8000bd <sec>
 8de:	30 91 be 00 	lds	r19, 0x00BE	; 0x8000be <sec+0x1>
 8e2:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <alarmSec2>
 8e6:	90 91 ae 00 	lds	r25, 0x00AE	; 0x8000ae <alarmSec2+0x1>
 8ea:	28 17       	cp	r18, r24
 8ec:	39 07       	cpc	r19, r25
 8ee:	91 f4       	brne	.+36     	; 0x914 <displayLCD+0xcc>
 8f0:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <min>
 8f4:	30 91 bc 00 	lds	r19, 0x00BC	; 0x8000bc <min+0x1>
 8f8:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <alarmMin2>
 8fc:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <alarmMin2+0x1>
 900:	28 17       	cp	r18, r24
 902:	39 07       	cpc	r19, r25
 904:	39 f4       	brne	.+14     	; 0x914 <displayLCD+0xcc>
 906:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <alarmSet>
 90a:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <alarmSet+0x1>
 90e:	01 97       	sbiw	r24, 0x01	; 1
 910:	09 f4       	brne	.+2      	; 0x914 <displayLCD+0xcc>
		alarmRoutine();
 912:	0d df       	rcall	.-486    	; 0x72e <alarmRoutine>
	}
	lcd_gotoxy(13,1);
 914:	61 e0       	ldi	r22, 0x01	; 1
 916:	8d e0       	ldi	r24, 0x0D	; 13
 918:	28 dc       	rcall	.-1968   	; 0x16a <lcd_gotoxy>
	lcd_print("  ");
 91a:	80 e7       	ldi	r24, 0x70	; 112
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	47 dc       	rcall	.-1906   	; 0x1ae <lcd_print>
	lcd_gotoxy(3,1);
 920:	61 e0       	ldi	r22, 0x01	; 1
 922:	83 e0       	ldi	r24, 0x03	; 3
 924:	22 dc       	rcall	.-1980   	; 0x16a <lcd_gotoxy>
	lcd_print(":");
 926:	8d e9       	ldi	r24, 0x9D	; 157
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	41 dc       	rcall	.-1918   	; 0x1ae <lcd_print>
	lcd_gotoxy(6,1);
 92c:	61 e0       	ldi	r22, 0x01	; 1
 92e:	86 e0       	ldi	r24, 0x06	; 6
 930:	1c dc       	rcall	.-1992   	; 0x16a <lcd_gotoxy>
	lcd_print(":");
 932:	8d e9       	ldi	r24, 0x9D	; 157
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	3b dc       	rcall	.-1930   	; 0x1ae <lcd_print>
	lcd_gotoxy(9,1);
 938:	61 e0       	ldi	r22, 0x01	; 1
 93a:	89 e0       	ldi	r24, 0x09	; 9
 93c:	16 dc       	rcall	.-2004   	; 0x16a <lcd_gotoxy>
 93e:	08 95       	ret

00000940 <EEPROM_write>:
	}
}

void EEPROM_write(unsigned int ucAddress, unsigned int ucData)
{
	while (EECR & (1<<EEPE)); //wait for completion of previous write
 940:	e1 99       	sbic	0x1c, 1	; 28
 942:	fe cf       	rjmp	.-4      	; 0x940 <EEPROM_write>
	EECR = (0 << EEPM1) | (0<<EEPM0); //set programming mode
 944:	1c ba       	out	0x1c, r1	; 28
	EEAR = ucAddress;	//set up address
 946:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;	//set up data registers
 948:	6d bb       	out	0x1d, r22	; 29
	EECR |= (1<<EEMPE);
 94a:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= (1 << EEPE); //start EEPROM
 94c:	e1 9a       	sbi	0x1c, 1	; 28
 94e:	08 95       	ret

00000950 <EEPROM_read>:
}

unsigned int EEPROM_read(unsigned int ucaddress)
{
	while(EECR & (1 << EEPE));	//wait for completion of previous write
 950:	e1 99       	sbic	0x1c, 1	; 28
 952:	fe cf       	rjmp	.-4      	; 0x950 <EEPROM_read>
	EEAR = ucaddress; //set up address register
 954:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1 << EERE); // start eeprom
 956:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;
 958:	8d b3       	in	r24, 0x1d	; 29
}
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	08 95       	ret

0000095e <main>:
void toDisplay();
void EEPROM_write (unsigned int ucAddress, unsigned int ucData);
unsigned int EEPROM_read(unsigned int ucaddress);

int main(void){
	lcd_init();
 95e:	cb db       	rcall	.-2154   	; 0xf6 <lcd_init>
	DDRB = 0xFF;//Set pin B to output
 960:	8f ef       	ldi	r24, 0xFF	; 255
 962:	87 bb       	out	0x17, r24	; 23
	DDRD = 0x00;//set pin D to input
 964:	11 ba       	out	0x11, r1	; 17

	TIMSK |= (1 << TOIE0); //enabling timer overflow interrupt enable
 966:	89 b7       	in	r24, 0x39	; 57
 968:	82 60       	ori	r24, 0x02	; 2
 96a:	89 bf       	out	0x39, r24	; 57
	TCCR0B = 0x03;//prescale by 64
 96c:	83 e0       	ldi	r24, 0x03	; 3
 96e:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 131;
 970:	83 e8       	ldi	r24, 0x83	; 131
 972:	82 bf       	out	0x32, r24	; 50

	MCUCR = 0b00001010;//The falling edge of INT0 generates an interrupt request
 974:	8a e0       	ldi	r24, 0x0A	; 10
 976:	85 bf       	out	0x35, r24	; 53
	GIMSK = 0b01000000;//External Interrupt Request 0 Enable
 978:	80 e4       	ldi	r24, 0x40	; 64
 97a:	8b bf       	out	0x3b, r24	; 59
	sei();//enable global interrupts
 97c:	78 94       	sei
	clear_lcd();
 97e:	2e dc       	rcall	.-1956   	; 0x1dc <clear_lcd>
	lcd_gotoxy(1,1);
 980:	61 e0       	ldi	r22, 0x01	; 1
 982:	81 e0       	ldi	r24, 0x01	; 1
 984:	f2 db       	rcall	.-2076   	; 0x16a <lcd_gotoxy>
	if(EEPROM_read(16)!=255){
 986:	80 e1       	ldi	r24, 0x10	; 16
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	e2 df       	rcall	.-60     	; 0x950 <EEPROM_read>
 98c:	8f 3f       	cpi	r24, 0xFF	; 255
 98e:	91 05       	cpc	r25, r1
 990:	51 f1       	breq	.+84     	; 0x9e6 <main+0x88>
		alarmHr = EEPROM_read(19);
 992:	83 e1       	ldi	r24, 0x13	; 19
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	dc df       	rcall	.-72     	; 0x950 <EEPROM_read>
 998:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <alarmHr+0x1>
 99c:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <alarmHr>
		alarmMin = EEPROM_read(20);
 9a0:	84 e1       	ldi	r24, 0x14	; 20
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	d5 df       	rcall	.-86     	; 0x950 <EEPROM_read>
 9a6:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <alarmMin+0x1>
 9aa:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <alarmMin>
		alarmSec = EEPROM_read(21);
 9ae:	85 e1       	ldi	r24, 0x15	; 21
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	ce df       	rcall	.-100    	; 0x950 <EEPROM_read>
 9b4:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <alarmSec+0x1>
 9b8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <alarmSec>
		alarmHr2 = EEPROM_read(22);
 9bc:	86 e1       	ldi	r24, 0x16	; 22
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	c7 df       	rcall	.-114    	; 0x950 <EEPROM_read>
 9c2:	90 93 aa 00 	sts	0x00AA, r25	; 0x8000aa <alarmHr2+0x1>
 9c6:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <alarmHr2>
		alarmMin2 = EEPROM_read(23);
 9ca:	87 e1       	ldi	r24, 0x17	; 23
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	c0 df       	rcall	.-128    	; 0x950 <EEPROM_read>
 9d0:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <alarmMin2+0x1>
 9d4:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <alarmMin2>
		alarmSec2 = EEPROM_read(24);
 9d8:	88 e1       	ldi	r24, 0x18	; 24
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	b9 df       	rcall	.-142    	; 0x950 <EEPROM_read>
 9de:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <alarmSec2+0x1>
 9e2:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <alarmSec2>
	}
	displayMode();
 9e6:	44 dc       	rcall	.-1912   	; 0x270 <displayMode>
				EEPROM_write(23,alarmMin2);
				EEPROM_write(24,alarmSec2);
				tempHr = 0;
				tempMin = 0;
				tempSec = 0;
				alarmSet = 1;
 9e8:	c1 e0       	ldi	r28, 0x01	; 1
 9ea:	d0 e0       	ldi	r29, 0x00	; 0
		alarmMin2 = EEPROM_read(23);
		alarmSec2 = EEPROM_read(24);
	}
	displayMode();
	while(1){
		if(mode==1){//Normal Mode
 9ec:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <mode>
 9f0:	81 30       	cpi	r24, 0x01	; 1
 9f2:	09 f0       	breq	.+2      	; 0x9f6 <main+0x98>
 9f4:	b3 c0       	rjmp	.+358    	; 0xb5c <main+0x1fe>
			if(prevMode==1){
 9f6:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <prevMode>
 9fa:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <prevMode+0x1>
 9fe:	81 30       	cpi	r24, 0x01	; 1
 a00:	91 05       	cpc	r25, r1
 a02:	49 f5       	brne	.+82     	; 0xa56 <main+0xf8>
				//Previous mode was set time mode, then set all time variables to user set variables
				hr = tempHr;
 a04:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <tempHr>
 a08:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <tempHr+0x1>
 a0c:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <hr+0x1>
 a10:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <hr>
				min = tempMin;
 a14:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <tempMin>
 a18:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <tempMin+0x1>
 a1c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <min+0x1>
 a20:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <min>
				sec = tempSec;
 a24:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <tempSec>
 a28:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <tempSec+0x1>
 a2c:	90 93 be 00 	sts	0x00BE, r25	; 0x8000be <sec+0x1>
 a30:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <sec>
				tempHr = 0;
 a34:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <tempHr+0x1>
 a38:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <tempHr>
				tempMin = 0;
 a3c:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <tempMin+0x1>
 a40:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <tempMin>
				tempSec = 0;
 a44:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <tempSec+0x1>
 a48:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <tempSec>
				prevMode=0;
 a4c:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <prevMode+0x1>
 a50:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <prevMode>
 a54:	80 c0       	rjmp	.+256    	; 0xb56 <main+0x1f8>
			}else if(prevMode==2){
 a56:	82 30       	cpi	r24, 0x02	; 2
 a58:	91 05       	cpc	r25, r1
 a5a:	f1 f5       	brne	.+124    	; 0xad8 <main+0x17a>
				//Previous mode was set alarm 1 mode then set all alarm 1 variables to user set variables
				prevMode=0;
 a5c:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <prevMode+0x1>
 a60:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <prevMode>
				alarmHr = tempHr;
 a64:	60 91 b5 00 	lds	r22, 0x00B5	; 0x8000b5 <tempHr>
 a68:	70 91 b6 00 	lds	r23, 0x00B6	; 0x8000b6 <tempHr+0x1>
 a6c:	70 93 b0 00 	sts	0x00B0, r23	; 0x8000b0 <alarmHr+0x1>
 a70:	60 93 af 00 	sts	0x00AF, r22	; 0x8000af <alarmHr>
				alarmMin = tempMin;
 a74:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <tempMin>
 a78:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <tempMin+0x1>
 a7c:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <alarmMin+0x1>
 a80:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <alarmMin>
				alarmSec = tempSec;
 a84:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <tempSec>
 a88:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <tempSec+0x1>
 a8c:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <alarmSec+0x1>
 a90:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <alarmSec>
				EEPROM_write(19,alarmHr);
 a94:	83 e1       	ldi	r24, 0x13	; 19
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	53 df       	rcall	.-346    	; 0x940 <EEPROM_write>
				EEPROM_write(20,alarmMin);
 a9a:	60 91 b1 00 	lds	r22, 0x00B1	; 0x8000b1 <alarmMin>
 a9e:	70 91 b2 00 	lds	r23, 0x00B2	; 0x8000b2 <alarmMin+0x1>
 aa2:	84 e1       	ldi	r24, 0x14	; 20
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	4c df       	rcall	.-360    	; 0x940 <EEPROM_write>
				EEPROM_write(21,alarmSec);
 aa8:	60 91 b3 00 	lds	r22, 0x00B3	; 0x8000b3 <alarmSec>
 aac:	70 91 b4 00 	lds	r23, 0x00B4	; 0x8000b4 <alarmSec+0x1>
 ab0:	85 e1       	ldi	r24, 0x15	; 21
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	45 df       	rcall	.-374    	; 0x940 <EEPROM_write>
				tempHr = 0;
 ab6:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <tempHr+0x1>
 aba:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <tempHr>
				tempMin = 0;
 abe:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <tempMin+0x1>
 ac2:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <tempMin>
				tempSec = 0;
 ac6:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <tempSec+0x1>
 aca:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <tempSec>
				alarmSet = 1;
 ace:	d0 93 a8 00 	sts	0x00A8, r29	; 0x8000a8 <alarmSet+0x1>
 ad2:	c0 93 a7 00 	sts	0x00A7, r28	; 0x8000a7 <alarmSet>
 ad6:	3f c0       	rjmp	.+126    	; 0xb56 <main+0x1f8>
			}else if(prevMode==3){
 ad8:	03 97       	sbiw	r24, 0x03	; 3
 ada:	e9 f5       	brne	.+122    	; 0xb56 <main+0x1f8>
				//Previous mode was set alarm 2 mode then set all alarm 2 variables to user set variables
				prevMode=0;
 adc:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <prevMode+0x1>
 ae0:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <prevMode>
				alarmHr2 = tempHr;
 ae4:	60 91 b5 00 	lds	r22, 0x00B5	; 0x8000b5 <tempHr>
 ae8:	70 91 b6 00 	lds	r23, 0x00B6	; 0x8000b6 <tempHr+0x1>
 aec:	70 93 aa 00 	sts	0x00AA, r23	; 0x8000aa <alarmHr2+0x1>
 af0:	60 93 a9 00 	sts	0x00A9, r22	; 0x8000a9 <alarmHr2>
				alarmMin2 = tempMin;
 af4:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <tempMin>
 af8:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <tempMin+0x1>
 afc:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <alarmMin2+0x1>
 b00:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <alarmMin2>
				alarmSec2 = tempSec;
 b04:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <tempSec>
 b08:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <tempSec+0x1>
 b0c:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <alarmSec2+0x1>
 b10:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <alarmSec2>
				EEPROM_write(22,alarmHr2);
 b14:	86 e1       	ldi	r24, 0x16	; 22
 b16:	90 e0       	ldi	r25, 0x00	; 0
 b18:	13 df       	rcall	.-474    	; 0x940 <EEPROM_write>
				EEPROM_write(23,alarmMin2);
 b1a:	60 91 ab 00 	lds	r22, 0x00AB	; 0x8000ab <alarmMin2>
 b1e:	70 91 ac 00 	lds	r23, 0x00AC	; 0x8000ac <alarmMin2+0x1>
 b22:	87 e1       	ldi	r24, 0x17	; 23
 b24:	90 e0       	ldi	r25, 0x00	; 0
 b26:	0c df       	rcall	.-488    	; 0x940 <EEPROM_write>
				EEPROM_write(24,alarmSec2);
 b28:	60 91 ad 00 	lds	r22, 0x00AD	; 0x8000ad <alarmSec2>
 b2c:	70 91 ae 00 	lds	r23, 0x00AE	; 0x8000ae <alarmSec2+0x1>
 b30:	88 e1       	ldi	r24, 0x18	; 24
 b32:	90 e0       	ldi	r25, 0x00	; 0
 b34:	05 df       	rcall	.-502    	; 0x940 <EEPROM_write>
				tempHr = 0;
 b36:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <tempHr+0x1>
 b3a:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <tempHr>
				tempMin = 0;
 b3e:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <tempMin+0x1>
 b42:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <tempMin>
				tempSec = 0;
 b46:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <tempSec+0x1>
 b4a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <tempSec>
				alarmSet = 1;
 b4e:	d0 93 a8 00 	sts	0x00A8, r29	; 0x8000a8 <alarmSet+0x1>
 b52:	c0 93 a7 00 	sts	0x00A7, r28	; 0x8000a7 <alarmSet>
			}
			selected=0; //reset selected to 0. So that the user may reselect a unit
 b56:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <selected>
 b5a:	01 c0       	rjmp	.+2      	; 0xb5e <main+0x200>
		}else{
			//If mode is not 1 then set time
			setTime();
 b5c:	3f dc       	rcall	.-1922   	; 0x3dc <setTime>
		}
		displayMode();
 b5e:	88 db       	rcall	.-2288   	; 0x270 <displayMode>
		displayLCD(mode);//used to display time or tempTime based on mode
 b60:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <mode>
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	70 de       	rcall	.-800    	; 0x848 <displayLCD>
	}
 b68:	41 cf       	rjmp	.-382    	; 0x9ec <main+0x8e>

00000b6a <__itoa_ncheck>:
 b6a:	bb 27       	eor	r27, r27
 b6c:	4a 30       	cpi	r20, 0x0A	; 10
 b6e:	31 f4       	brne	.+12     	; 0xb7c <__itoa_ncheck+0x12>
 b70:	99 23       	and	r25, r25
 b72:	22 f4       	brpl	.+8      	; 0xb7c <__itoa_ncheck+0x12>
 b74:	bd e2       	ldi	r27, 0x2D	; 45
 b76:	90 95       	com	r25
 b78:	81 95       	neg	r24
 b7a:	9f 4f       	sbci	r25, 0xFF	; 255
 b7c:	01 c0       	rjmp	.+2      	; 0xb80 <__utoa_common>

00000b7e <__utoa_ncheck>:
 b7e:	bb 27       	eor	r27, r27

00000b80 <__utoa_common>:
 b80:	fb 01       	movw	r30, r22
 b82:	55 27       	eor	r21, r21
 b84:	aa 27       	eor	r26, r26
 b86:	88 0f       	add	r24, r24
 b88:	99 1f       	adc	r25, r25
 b8a:	aa 1f       	adc	r26, r26
 b8c:	a4 17       	cp	r26, r20
 b8e:	10 f0       	brcs	.+4      	; 0xb94 <__utoa_common+0x14>
 b90:	a4 1b       	sub	r26, r20
 b92:	83 95       	inc	r24
 b94:	50 51       	subi	r21, 0x10	; 16
 b96:	b9 f7       	brne	.-18     	; 0xb86 <__utoa_common+0x6>
 b98:	a0 5d       	subi	r26, 0xD0	; 208
 b9a:	aa 33       	cpi	r26, 0x3A	; 58
 b9c:	08 f0       	brcs	.+2      	; 0xba0 <__utoa_common+0x20>
 b9e:	a9 5d       	subi	r26, 0xD9	; 217
 ba0:	a1 93       	st	Z+, r26
 ba2:	00 97       	sbiw	r24, 0x00	; 0
 ba4:	79 f7       	brne	.-34     	; 0xb84 <__utoa_common+0x4>
 ba6:	b1 11       	cpse	r27, r1
 ba8:	b1 93       	st	Z+, r27
 baa:	11 92       	st	Z+, r1
 bac:	cb 01       	movw	r24, r22
 bae:	00 c0       	rjmp	.+0      	; 0xbb0 <strrev>

00000bb0 <strrev>:
 bb0:	dc 01       	movw	r26, r24
 bb2:	fc 01       	movw	r30, r24
 bb4:	67 2f       	mov	r22, r23
 bb6:	71 91       	ld	r23, Z+
 bb8:	77 23       	and	r23, r23
 bba:	e1 f7       	brne	.-8      	; 0xbb4 <strrev+0x4>
 bbc:	32 97       	sbiw	r30, 0x02	; 2
 bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <strrev+0x18>
 bc0:	7c 91       	ld	r23, X
 bc2:	6d 93       	st	X+, r22
 bc4:	70 83       	st	Z, r23
 bc6:	62 91       	ld	r22, -Z
 bc8:	ae 17       	cp	r26, r30
 bca:	bf 07       	cpc	r27, r31
 bcc:	c8 f3       	brcs	.-14     	; 0xbc0 <strrev+0x10>
 bce:	08 95       	ret

00000bd0 <_exit>:
 bd0:	f8 94       	cli

00000bd2 <__stop_program>:
 bd2:	ff cf       	rjmp	.-2      	; 0xbd2 <__stop_program>
